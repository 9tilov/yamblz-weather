package com.example.toor.yamblzweather.data.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER_MODEL".
*/
public class WeatherModelDao extends AbstractDao<WeatherModel, Long> {

    public static final String TABLENAME = "WEATHER_MODEL";

    /**
     * Properties of entity WeatherModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CityId = new Property(1, int.class, "cityId", false, "CITY_ID");
        public final static Property CurrentWeather = new Property(2, String.class, "currentWeather", false, "CURRENT_WEATHER");
        public final static Property ForecastWeather = new Property(3, String.class, "forecastWeather", false, "FORECAST_WEATHER");
        public final static Property Lat = new Property(4, Double.class, "lat", false, "LAT");
        public final static Property Lon = new Property(5, Double.class, "lon", false, "LON");
    }


    public WeatherModelDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CITY_ID\" INTEGER NOT NULL ," + // 1: cityId
                "\"CURRENT_WEATHER\" TEXT," + // 2: currentWeather
                "\"FORECAST_WEATHER\" TEXT," + // 3: forecastWeather
                "\"LAT\" REAL," + // 4: lat
                "\"LON\" REAL);"); // 5: lon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeatherModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCityId());
 
        String currentWeather = entity.getCurrentWeather();
        if (currentWeather != null) {
            stmt.bindString(3, currentWeather);
        }
 
        String forecastWeather = entity.getForecastWeather();
        if (forecastWeather != null) {
            stmt.bindString(4, forecastWeather);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(5, lat);
        }
 
        Double lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(6, lon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeatherModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCityId());
 
        String currentWeather = entity.getCurrentWeather();
        if (currentWeather != null) {
            stmt.bindString(3, currentWeather);
        }
 
        String forecastWeather = entity.getForecastWeather();
        if (forecastWeather != null) {
            stmt.bindString(4, forecastWeather);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(5, lat);
        }
 
        Double lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(6, lon);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WeatherModel readEntity(Cursor cursor, int offset) {
        WeatherModel entity = new WeatherModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // cityId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // currentWeather
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // forecastWeather
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // lat
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5) // lon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeatherModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCityId(cursor.getInt(offset + 1));
        entity.setCurrentWeather(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setForecastWeather(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLat(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setLon(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WeatherModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WeatherModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeatherModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
